// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your data model
model User {
  id          Int           @id @default(autoincrement()) @map(name: "id")
  firstName   String        @db.VarChar(20)
  lastName    String?       @db.VarChar(20)
  email       String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?     @map(name: "deleted_at")
  Token       Token[]
  Trip        Trip[]
  Participant Participant[]
}

model Token {
  id           Int       @id @default(autoincrement()) @map(name: "id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int       @map(name: "userId")
  token        String    @db.VarChar(1000)
  refreshToken String    @db.VarChar(1000)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime? @map(name: "deleted_at")
}

model Trip {
  id          Int           @id @default(autoincrement()) @map(name: "id")
  tripName    String        @db.VarChar(255)
  startDate   DateTime?
  endDate     DateTime?
  user        User          @relation(fields: [leaderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leaderId    Int           @map(name: "leaderId")
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?     @map(name: "deleted_at")
  Participant Participant[]
  Expense     Expense[]
}

model Participant {
  id                 Int                  @id @default(autoincrement()) @map(name: "id")
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             Int                  @map(name: "userId")
  trip               Trip                 @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripId             Int                  @map(name: "tripId")
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted          Boolean              @default(false)
  deletedAt          DateTime?            @map(name: "deleted_at")
  Contribution       Contribution[]
  ExpenseParticipant ExpenseParticipant[]
}

model Contribution {
  id            Int         @id @default(autoincrement()) @map(name: "id")
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId Int         @map(name: "participantId")
  amount        Decimal     @db.Decimal(10, 2)

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted Boolean   @default(false)
  deletedAt DateTime? @map(name: "deleted_at")
}

model Expense {
  id                 Int                  @id @default(autoincrement()) @map(name: "id")
  trip               Trip                 @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripId             Int                  @map(name: "tripId")
  description        String?              @db.Text
  amount             Decimal              @db.Decimal(10, 2)
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted          Boolean              @default(false)
  deletedAt          DateTime?            @map(name: "deleted_at")
  ExpenseParticipant ExpenseParticipant[]
}

model ExpenseParticipant {
  id            Int         @id @default(autoincrement()) @map(name: "id")
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenseId     Int         @map(name: "expenseId")
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId Int         @map(name: "participantId")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map(name: "updated_at")
  isDeleted     Boolean     @default(false)
  deletedAt     DateTime?   @map(name: "deleted_at")
}
